import { clientsClaim } from 'workbox-core'
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching'

declare let self: ServiceWorkerGlobalScope

// Take control of all pages under this SW's scope immediately
clientsClaim()

// Clean up any previous workbox caches
cleanupOutdatedCaches()

// Precache all the assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST)

// Listen for the 'SKIP_WAITING' message from the client
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Received SKIP_WAITING message, calling skipWaiting()')
    self.skipWaiting()
  }
})

// Notify clients when a new service worker is waiting
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({
      type: 'VERSION_INFO',
      version: '{{VITE_APP_VERSION}}' // This will be replaced by Vite
    })
  }
})

// When the service worker is activated (after skipWaiting), notify clients
self.addEventListener('activate', (event) => {
  console.log('Service worker activated')
  
  // Claim all clients immediately
  event.waitUntil(clients.claim())
  
  // Notify all clients that a new version is available
  event.waitUntil(
    clients.matchAll().then((clientList) => {
      clientList.forEach((client) => {
        client.postMessage({
          type: 'SW_ACTIVATED',
          version: '{{VITE_APP_VERSION}}'
        })
      })
    })
  )
})

// Listen for updates and notify clients
self.addEventListener('install', (event) => {
  console.log('Service worker installing')
  
  // Notify existing clients that an update is available
  event.waitUntil(
    clients.matchAll().then((clientList) => {
      if (clientList.length > 0) {
        clientList.forEach((client) => {
          client.postMessage({
            type: 'SW_UPDATE_AVAILABLE',
            version: '{{VITE_APP_VERSION}}'
          })
        })
      }
    })
  )
})

export {}
