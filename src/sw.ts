// Service worker for PWA update handling
import { clientsClaim } from 'workbox-core'
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching'

declare const self: ServiceWorkerGlobalScope & {
  __WB_MANIFEST: any
  skipWaiting(): void
}

// Take control of all pages under this SW's scope immediately
clientsClaim()

// Clean up any previous workbox caches
cleanupOutdatedCaches()

// Precache all the assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST)

// Listen for the 'SKIP_WAITING' message from the client
self.addEventListener('message', (event: ExtendableMessageEvent) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Received SKIP_WAITING message, calling skipWaiting()')
    self.skipWaiting()
  }
})

// When the service worker is activated (after skipWaiting), notify clients
self.addEventListener('activate', (event: ExtendableEvent) => {
  console.log('Service worker activated')
  
  // Claim all clients immediately
  event.waitUntil(clients.claim())
})

// Listen for updates and notify clients
self.addEventListener('install', (event: ExtendableEvent) => {
  console.log('Service worker installing - update available')
  
  // Notify existing clients that an update is available
  event.waitUntil(
    clients.matchAll().then((clientList: readonly Client[]) => {
      if (clientList.length > 0) {
        clientList.forEach((client: Client) => {
          client.postMessage({
            type: 'SW_UPDATE_AVAILABLE'
          })
        })
      }
    })
  )
})

export {}
